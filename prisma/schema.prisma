// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  slug            String  @unique(map: "product_slug_idx")
  category        String
  images          String[]
  brand           String
  description     String
  stock           Int
  price           Decimal   @default(0) @db.Decimal(12,2)
  rating          Decimal   @default(0) @db.Decimal(3,2)
  numReviews      Int   @default(0)
  isFeatured      Boolean   @default(false)
  banner          String?
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
}

/*
banner    String?
Esto significa que lo hace opcional
 */
/*

  Despues de gebnerar el modelo, vamos a necesitar "generar nuestro cliente"
  Y para eso debemos agregar un comando al archivo:
  package.json
  "postinstall": "prisma generate"
  Luego escribimos en la terminal:
  npx prisma generate.
  Es recopmendable no tener el Server funcionando
  */

  /*
  Migracion?
  "debemos tener una migracion y agregarla a la DDBB. Donde creara la tabla con todos
  los atributos del modelo y sus valores"
  Con el comando:
  npx prisma migrate dev --name init
  (recomienda init por que es el modelo con el que iniciamos la migracion a la DDBB)
  Esto creara un archivo y la tabla. Y podremos cotejar la creacion de la tabla con
  el comando:
  npx prisma studio
  */

model User {
    id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String        @default("NO_NAME")
    email           String        @unique(map: "user_email_idx")
    emailVerified   DateTime?     @db.Timestamp(6)
    image           String?
    password        String?
    role            String?       @default("user")
    address         Json?
    paymentMethod   String?
    createdAt       DateTime      @default(now())@db.Timestamp(6)
    updatedAt       DateTime      @updatedAt
    account         Account[]
    session         Session[]
  }

model Account {
  userId              String     @db.Uuid
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
